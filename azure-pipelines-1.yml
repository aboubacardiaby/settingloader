
trigger:
- main

name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

variables:
  AgentImage: "windows-latest" 
  system.debug: true 
  BuildConfiguration: 'Release'
stages:
- stage: 'Build_Stage' #Stage name cannot have spaces
  displayName: 'Build' #Name displayed when viewing in Azure DevOps
  jobs:
  - job: 'Build_Job' #Job name cannot have spaces
    displayName: 'Application Build' #Name displayed when viewing in Azure DevOps
    pool:
      vmImage: $(AgentImage) #See available agent images: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent
    steps:
    - task: UseDotNet@2
      displayName: 'Use DotNet Core SDK'
      inputs:
        version: 6.x

    - task: DotNetCoreCLI@2
      displayName: Publish App
      inputs:
        command: publish  #The publish command does a restore, build and creates a zip file so no need to add extra steps
        publishWebProjects: true
        zipAfterPublish: false
        projects: '**/OM.Complaints/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)/application'

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test #Don't forget to test!
        projects: '**/*.Tests.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: ArchiveFiles@2
      displayName: 'Archive build'
      inputs:
        rootFolderOrFile: '$(build.artifactstagingdirectory)/application'
        includeRootFolder: false
        archiveFile: '$(build.artifactstagingdirectory)/app/application.zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)\app\application.zip' #Publish (different from the command used above) allows the artifact to be used in later jobs
        artifactName: 'app'

- stage: 'Deploy_Dev' #Stage name cannot have spaces
  displayName: 'Dev' #Name displayed when viewing in Azure DevOps
  dependsOn: ['Build_Stage'] #List of previous stages tha  must complete before this stage runs
  jobs: 
  - job:  waitForValidation
    displayName: Wait for external validation  
    timeoutInMinutes: 4320
    pool: server
    steps:     
      - task: ManualValidation@0
        inputs:
          notifyUsers: 'adiaby@owens-minor.com'
          instructions: 'Please approve this request'
  - deployment: Deploy_Dev #No spaces
    displayName: Dev Deployment #Name displayed in UI
    dependsOn: 'waitForValidation'
    pool:
      vmImage: $(AgentImage) #variable that was defined previously (not shown in this snippet)      
    environment: Dev
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'app'
          - task: ExtractFiles@1
            displayName: 'Extract files'
            inputs:
              archiveFilePatterns: "$(Pipeline.Workspace)/app/application.zip"
              destinationFolder: "$(Pipeline.Workspace)/files"
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy'
            inputs:
              ConnectionType: 'AzureRM' #This is the default Value
              WebAppKind: 'webApp' #This is the default value
              azureSubscription: 'settingdevservconnection' #Name of the Service Connection previously created
              WebAppName: 'settingdev' #Name of the App Service to be deployed to
              Package: '$(Pipeline.Workspace)/files/loaderweb' #Application files to be deployed
              enableCustomDeployment: true #These two properties override the default of having 
              DeploymentType: 'webDeploy'  #the pipeline deciding for us what it thinks the best deployment option should be  
